require('dotenv').config()
const fs = require("fs")
const {
    runBashCommand,
    runBashScript,
    readJsonFile,
    saveJsonFile
} = require('./strapux')

// get Nuxt and Strapi paths
const frontendDir = require("../strapux.config.json").frontend.path
const backendDir = require("../strapux.config.json").backend.path

// check NODE_ENV, create Nuxt and Strapi .env files
const {
    NODE_ENV
} = process.env
let prefix = 'DEVELOPMENT_'
switch (NODE_ENV) {
    case 'development':
        buildEnv(prefix, 'nuxt')
        buildEnv(prefix, 'strapi')
        break;

    case 'staging':
        console.log('setup staging env')
        prefix = 'STAGING_'
        break

    case 'production':
        console.log('setup production env')
        prefix = 'PRODUCTION_'
        break

    default:
        break
}

function buildEnv(prefix, nuxtOrStrapi) {
    // read .env line by line into array of strings
    let path = nuxtOrStrapi === 'nuxt' ? frontendDir : backendDir
    // create .env files if not exist
    prefix = nuxtOrStrapi === 'nuxt' ? `NUXT_${prefix}` : `STRAPI_${prefix}`
    let framworkPrefix = nuxtOrStrapi === 'nuxt' ? `NUXT_` : `STRAPI_`
    runBashCommand(`touch ${nuxtOrStrapi}/.env`)
    runBashCommand(`echo "# DO NOT EDIT - auto generated by Strapux" > ${path}/.env`)
    runBashCommand(`echo "# edit main .env file in your Strapux project root folder" >> ${path}/.env`)
    runBashCommand(`echo "# prefix each with ${framworkPrefix}DEVELOPMENT_, ${framworkPrefix}STAGING_, and ${framworkPrefix}PRODUCTION_" >> ${path}/.env`)
    runBashCommand(`echo "# the appropriate enviroments will be stripped of prefix, and added to this file" >> ${path}/.env`)
    runBashCommand(`echo "" >> ${path}/.env`)
    var envs = fs.readFileSync('.env').toString().split("\n");
    for (i in envs) {
        let line = envs[i]
        if (line.includes(prefix)) {
            if (!line.includes('#')) {
                let env = line.replace(prefix, '')
                runBashCommand(`echo "${env}" >> ${nuxtOrStrapi}/.env`)
            }
        }
    }
}
